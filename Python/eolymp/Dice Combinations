# https://www.eolymp.com/en/problems/9036

from io import BytesIO, IOBase
import os
import sys

BUFSIZE = 8192

class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = 'x' in file.mode or 'r' not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b: break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b'\n') + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")

try: sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
except: pass

def input(): return sys.stdin.readline().rstrip("\r\n")
def li(): return list(map(int, sys.stdin.readline().split()))
def mp(): return map(int, sys.stdin.readline().split())
def inp(): return int(sys.stdin.readline())
def prl(n): return sys.stdout.write(str(n)+'\n')
def pr(n): return sys.stdout.write(str(n)+' ')

def solve():
    MOD = 1000_000_007
    n = inp()
    k = 6
    
    if n <= 6: prl(2**(n-1)); return
    
    n += 1
    
    dp = [0]*(n+1)
    dp[0] = dp[1] = 1
    
    for i in range(2,k+1):
        dp[i] = (2*dp[i-1])%MOD
    
    for i in range(k+1,n+1):
        dp[i] = (2*dp[i-1]-dp[i-k-1])%MOD
    
    prl(dp[n-1])
    return

def main():
    T = 1
#     T = inp()
    for _ in range(T):
        solve()

if __name__ == "__main__":
    main()
